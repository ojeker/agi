import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*

defaultTasks "last"

def tmpDir = buildDir.toString()
def xtfPath = tmpDir + "/data.xtf"
def shpPath = tmpDir + "/data.shp"
def schemaName = "afu_igel_pub_v1"

def dbCon = ['jdbc:postgresql://localhost:54322/pub', 'ddluser', 'ddluser']

task generateTestData(type: SqlExecutor){
    doFirst{
        println elapsed()
    }
    database = dbCon
    sqlFiles = ['delete.sql','insert.sql']
}

task transfer(type: Db2Db, dependsOn: generateTestData){
    doFirst{
        println elapsed()
    }
    sourceDb = dbCon
    targetDb = dbCon
    transferSets = [
            new TransferSet('transfer.sql','afu_igel_pub_v1_1.igel_stall', true),
    ];      
}

task exportXtf(type: Ili2pgExport, dependsOn: generateTestData){
    doFirst{
        println elapsed()
    }
    database = dbCon
    dbschema = schemaName
    disableValidation = true
    dataFile = xtfPath
    models = 'SO_AFU_Igel_Publikation_20211116'
}

task deleteAfterExport(type: SqlExecutor, dependsOn: exportXtf){
    doFirst{
        println elapsed()
    }
    database = dbCon
    sqlFiles = ['delete.sql']
}

task importXtf(type: Ili2pgImport, dependsOn: deleteAfterExport){
    doFirst{
        println elapsed()
    }
    database = dbCon
    dbschema = schemaName
    disableValidation = true
    dataFile = xtfPath
}

task last(dependsOn: importXtf){
    doLast{
        println elapsed()
    }
}

project.ext.start = -1
def elapsed() {
    if(project.ext.start == -1)
        project.ext.start = System.currentTimeMillis()

    def sec = Math.round((System.currentTimeMillis() - project.ext.start) / 1000)
    println 'ELAPSED: ' + sec
}
